# K8s Resource Visualizer Backend Makefile

.PHONY: fmt lint test build run deps clean dev test-tree help

# Default target
all: deps fmt lint build

# Format code
fmt:
	@echo "üé® Formatting Go code..."
	go fmt ./...

# Run linter
lint:
	@echo "üîç Running linter..."
	golangci-lint run || echo "‚ö†Ô∏è  Install golangci-lint for better linting"

# Run tests
test:
	@echo "üß™ Running tests..."
	go test -v ./...

# Run tests with coverage
test-coverage:
	@echo "üìä Running tests with coverage..."
	go test -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html
	@echo "Coverage report generated: coverage.html"

# Build the application with new resource tree support
build:
	@echo "üî® Building application..."
	go build -o bin/k8s-resource-visualizer main.go resource_tree.go

# Run the application in development mode
run:
	@echo "üöÄ Starting development server..."
	go run main.go resource_tree.go

# Development mode with auto-reload (requires air)
dev:
	@echo "üîÑ Starting development mode with auto-reload..."
	@if command -v air >/dev/null 2>&1; then \
		air; \
	else \
		echo "üì¶ Installing air for auto-reload..."; \
		go install github.com/cosmtrek/air@latest; \
		air; \
	fi

# Install dependencies
deps:
	@echo "üì¶ Installing dependencies..."
	go mod tidy
	go mod download

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -rf bin/
	rm -f coverage.out coverage.html
	go clean

# Test the new tree API functionality
test-tree:
	@echo "üå≥ Testing tree API functionality..."
	@if [ -f "../test-complete-tree-structure.sh" ]; then \
		cd .. && ./test-complete-tree-structure.sh; \
	else \
		echo "‚ùå Tree test script not found. Please run from project root."; \
	fi

# Docker build
docker-build:
	@echo "üê≥ Building Docker image..."
	docker build -t k8s-resource-visualizer:latest .

# Docker run
docker-run:
	@echo "üê≥ Running Docker container..."
	docker run -p 8080:8080 k8s-resource-visualizer:latest

# Performance benchmark
benchmark:
	@echo "‚ö° Running performance benchmarks..."
	go test -bench=. -benchmem ./...

# Check Go version and dependencies
check-env:
	@echo "üîç Checking environment..."
	@echo "Go version: $$(go version)"
	@echo "GOPATH: $$(go env GOPATH)"
	@echo "GOROOT: $$(go env GOROOT)"
	@kubectl version --client --short 2>/dev/null || echo "‚ö†Ô∏è  kubectl not found"

# Help
help:
	@echo "üõ†Ô∏è  K8s Resource Visualizer Backend Makefile"
	@echo ""
	@echo "Available targets:"
	@echo "  all          - Run deps, fmt, lint, and build"
	@echo "  fmt          - Format Go code"
	@echo "  lint         - Run linter"
	@echo "  test         - Run tests"
	@echo "  test-coverage - Run tests with coverage report"
	@echo "  build        - Build the application"
	@echo "  run          - Run the application"
	@echo "  dev          - Run in development mode with auto-reload"
	@echo "  deps         - Install dependencies"
	@echo "  clean        - Clean build artifacts"
	@echo "  test-tree    - Test the new tree API functionality"
	@echo "  docker-build - Build Docker image"
	@echo "  docker-run   - Run Docker container"
	@echo "  benchmark    - Run performance benchmarks"
	@echo "  check-env    - Check environment setup"
	@echo "  help         - Show this help message"